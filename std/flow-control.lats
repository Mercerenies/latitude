
;; Continuations
Cont call := { meta sys exitCC#: self, #'$1. }.
Cont toString := "Cont".
global callCC := {
  meta sys callCC#: Cont clone, #'$1.
}.
global escapable := {
  cont := $1.
  self return := { cont call. }.
}.

;; Booleans
Object toBool := True.
False toBool := False.
Nil toBool := False.
Object true? := False.
True true? := True.
Object false? := False.
False false? := True.
Object nil? := False.
Nil nil? := True.
Boolean toString := "Boolean".
True toString := "True".
False toString := "False".
Nil toString := "Nil".
Object falsify := {
  #'self toBool := False.
  #'self.
}.

;; Control Statements
global Conditional ::= Object clone.
Conditional truthy := True.
Conditional trueCase := {}.
Conditional falseCase := {}.
Conditional and := {
  arg := #'$1.
  self truthy := meta sys ifThenElse#:
    self truthy,
    { parent self send #'arg call toBool. },
    { False. }.
  self.
}.
Conditional or := {
  arg := #'$1.
  self truthy := meta sys ifThenElse#:
    self truthy,
    { True. },
    { parent self send #'arg call toBool. }.
  self.
}.
Conditional then := {
  self trueCase := #'$1.
  self.
}.
Conditional else := {
  this := self.
  this falseCase := #'$1.
  meta sys ifThenElse#: this truthy, { this trueCase. }, { this falseCase. }.
}.
Conditional if := {
  truthy := #'$1.
  Conditional clone tap {
    self truthy := self send #'truthy call toBool.
  }.
}.
global if := { Conditional if. }.
Object ifTrue := {
  content := #'$1.
  if (self) then { Kernel invoke #'(content) on #'(parent self) call. } else { Nil. }.
  #'self.
}.
Object ifFalse := {
  content := #'$1.
  if (self) then { Nil. } else { Kernel invoke #'(content) on #'(parent self) call. }.
  #'self.
}.
Object and := {
  if (self) then #'$1 else { False. }.
}.
Object or := {
  fst := self.
  if (fst) then { fst. } else #'$1.
}.
Object not := {
  if (self) then { False. } else { True. }.
}.

;; Loops
global loop := {
  content := #'$1.
  meta sys loopDo#: {
    Kernel invoke #'(content) on (Conditional) call.
  }.
}.
global while := {
  cond0 := #'$1.
  cond := Kernel invoke #'(cond0) on (Conditional).
  Object clone tap {
    self do := {
      stmt0 := #'$1.
      stmt := Kernel invoke #'(stmt0) on (Conditional).
      meta sys whileDo#: { cond call toBool. }, { stmt call. }.
    }.
  }.
}.
global loop* := {
  content := #'$1.
  callCC {
    escapable.
    breaker := Object clone.
    $breaker := Object clone.
    breaker last := { return. }.
    $breaker $last := #'(breaker last).
    next0 := callCC { $1. }.
    breaker next := { next0 call: next0. }.
    $breaker $next := #'(breaker next).
    meta sys loopDo#: {
      Kernel invoke #'(content) on (Conditional) by {
        breaker parent := $1 parent.
        $1 parent := breaker.
        $breaker parent := $2 parent.
        $2 parent := $breaker.
      } call.
    }.
  }.
}.
global while* := {
  cond0 := #'$1.
  cond := Kernel invoke #'(cond0) on (Conditional).
  Object clone tap {
    self do := {
      stmt0 := #'$1.
      stmt := Kernel invoke #'(stmt0) on (Conditional).
      callCC {
        escapable.
        breaker := Object clone.
        $breaker := Object clone.
        breaker last := { return. }.
        $breaker $last := #'(breaker last).
        next0 := callCC {
          breaker next := { next0 call: next0. }.
          $breaker $next := #'(breaker next).
          chunk := {
            breaker parent := $1 parent.
            $1 parent := breaker.
            $breaker parent := $2 parent.
            $2 parent := $breaker.
          }.
          cond by #'chunk.
          stmt by #'chunk.
          $1.
        }.
        meta sys whileDo#: { cond call toBool. }, { stmt call. }.
      }.
    }.
  }.
}.
meta sigil star := {
  arg := #'($1).
  {
    cap := Object clone tap {
      self loop := { self loop*. }.
      self while := { self while*. }.
      self loopCall := {
        breaker := Object clone.
        breaker next := { $next. }.
        breaker last := { $last. }.
        $1 by {
          breaker parent := $1 parent.
          $1 parent := breaker.
        }.
      }.
    }.
    Kernel invoke #'(arg) on #'(self) by {
      cap parent := $1 parent.
      $1 parent := cap.
    } call.
  }.
}.
global loopCall := {
  ;; This method does nothing by default. It will be "overridden" in
  ;; the star-loop cases.
  $1.
}.

Number times := {
  localize.
  block0 := #'$1.
  block := Kernel invoke #'(block0) on (Conditional).
  loopCall (block).
  i := -1.
  incr := {
    parent i := i + 1.
  }.
  while { incr. (i) < (this floor). } do {
    (block) call (i).
  }.
}.
Number upto := {
  localize.
  takes '[n].
  Object clone tap {
    self do := {
      block0 := #'$1.
      block := Kernel invoke #'(block0) on (Conditional).
      loopCall (block).
      i := this floor - 1.
      incr := { parent i := i + 1. }.
      while { incr. (i) < (n floor). } do {
        (block) call (i).
      }.
    }.
  }.
}.
Number downto := {
  localize.
  takes '[n].
  Object clone tap {
    self do := {
      block0 := #'$1.
      block := Kernel invoke #'(block0) on (Conditional).
      loopCall (block).
      i := this floor + 1.
      decr := {
        parent i := i - 1.
      }.
      while { decr. (i) > (n floor). } do {
        (block) call (i).
      }.
    }.
  }.
}.
Number times* := ~star #'(Number times).
Number upto* := ~star #'(Number upto).
Number downto* := ~star #'(Number downto).

global Ellipsis ::= Object clone.
global ... := Ellipsis.
Ellipsis =~ := True.

;; Cond Statement
global cond := {
  takes '[block].
  tripped := False.
  result := Nil.
  trip := {
    parent tripped := True.
    parent result := #'$1.
  }.
  whenProc := proc {
    block := #'($1).
    if { tripped not. } and { Kernel invoke #'(block) on (Conditional) call. } then {
      Object clone tap {
        self do := { trip: Kernel invoke #'($1) on (Conditional) call. }.
      }.
    } else {
      Object clone tap {
        self do := { }.
      }.
    }.
  }.
  procd := $dynamic send #'(block) by {
    $1 when := { whenProc call. }.
    $1 else := {
      body := #'$1.
      self when (True) do { (Kernel invoke #'(body) on (Conditional) call). }.
    }.
  }.
  procd call.
  #'(result).
}.

;; Case Statement
global case := {
  elem := $1. ; Evaluate if a method is passed in
  Object clone tap {
    self do := {
      takes '[block].
      callCC {
        escapable.
        whenProc := proc {
          match := #'($1) =~ #'(elem).
          if (match) then {
            Object clone tap {
              self do := {
                return: Conditional send ($1) call.
              }.
            }.
          } else {
            Object clone tap {
              self do := { }.
            }.
          }.
        }.
        Conditional send #'(block) by {
          $1 when := { whenProc call. }.
          $1 else := { self when (...) do. }.
        } call.
        Nil.
      }.
    }.
  }.
}.

;; Return the script
here.
