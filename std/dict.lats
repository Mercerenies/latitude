;;;; Copyright (c) 2018 Silvio Mayolo
;;;; See LICENSE.txt for licensing details

Dict toString := {
  localize.
  if (this empty?) then {
    "[=>]".
  } else {
    content := this to (Array) map {
      $1 car toString ++ " => " ++ $1 cdr toString.
    } joinText ", ".
    "[" ++ content ++ "]".
  }.
}.

Dict empty := {
  self clone.
}.
Dict clone := {
  Kernel cloneObject (self) tap {
    self &impl := Kernel dupObject #'(self &impl).
  }.
}.
Dict dup := {
  Kernel dupObject (self) tap {
    self &impl := Kernel dupObject #'(self &impl).
  }.
}.
Dict get := {
  meta sys directly#: self &impl, $1.
}.
Dict get= := {
  Slots put (self &impl, $1, #'$2).
}.
Dict has? := {
  meta sys slotCheck#: self &impl, $1.
}.
Dict delete := {
  Slots delete: self &impl, $1.
}.
Dict == := {
  localize.
  other := #'$1.
  callCC {
    escapable.
    (this keys size == other keys size) ifFalse {
      return (False).
    }.
    this keys visit {
      takes '[key].
      other has? (key) ifFalse {
        return (False).
      }.
      (this get (key) == other get (key)) ifFalse {
        return (False).
      }.
    }.
    True.
  }.
}.

Dict slot (Stream dumpHandler) = [
  Stream dumpHandler => { },
  '&impl => { $1 putln: "  &impl: #<...>". }
].
