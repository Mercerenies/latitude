
Dict toString := {
  content := self toArray map {
    $1 car toString ++ " => " ++ $1 cdr toString.
  } joinText ", ".
  "[" ++ content ++ "]".
}.
Dict &impl := Object clone.
Dict &impl parent := Dict &impl.
Dict &impl missing := #'(Object missing).
;; Dict impl0 := Nil. ; missing
;; Dict impl1 := Nil. ; parent

Dict empty := {
  self clone.
}.
Dict clone := {
  Kernel cloneObject (self) tap {
    self &impl := Kernel cloneObject #'(self &impl).
    self has? 'impl0 ifTrue {
      self impl0 := Kernel cloneObject #'(self impl0).
    }.
    self has? 'impl1 ifTrue {
      self impl1 := Kernel cloneObject #'(self impl1).
    }.
  }.
}.
Dict get := {
  localize.
  key := $1.
  ;; Messy hack >.<
  cond {
    when (key == 'missing) do {
      this impl0.
    }.
    when (key == 'parent) do {
      this impl1.
    }.
    else {
      Slots hold (this &impl, key).
    }.
  }.
}.
Dict get= := {
  localize.
  key := $1.
  value := #'$2.
  ;; Messy hack >.<
  cond {
    when (key == 'missing) do {
      this impl0 := #'value.
    }.
    when (key == 'parent) do {
      this impl1 := #'value.
    }.
    else {
      Slots put (this &impl, key, #'value).
    }.
  }.
}.
Dict has? := {
  localize.
  key := $1.
  {
    this get (key).
    True.
  } catch:
    err SlotError,
    { False. }.
}.
