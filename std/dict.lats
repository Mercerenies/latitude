
Dict toString := "Dict".
Dict &impl := Object clone.
Dict &impl parent := Dict &impl.
Dict &impl missing := #'(Object missing).
;; Dict impl0 := Nil. ; missing
;; Dict impl1 := Nil. ; parent

Dict empty := {
  self clone.
}.
Dict clone := {
  Kernel cloneObject (self) tap {
    self &impl := Kernel cloneObject #'(self &impl).
    self has? 'impl0 ifTrue {
      self impl0 := Kernel cloneObject #'(self impl0).
    }.
    self has? 'impl1 ifTrue {
      self impl1 := Kernel cloneObject #'(self impl1).
    }.
  }.
}.
Dict get := {
  localize.
  key := $1.
  ;; Messy hack >.<
  cond {
    when (key == 'missing) do {
      this impl0.
    }.
    when (key == 'parent) do {
      this impl1.
    }.
    else {
      Slots hold (this &impl, key).
    }.
  }.
}.
Dict get= := {
  localize.
  key := $1.
  value := #'$2.
  ;; Messy hack >.<
  cond {
    when (key == 'missing) do {
      this impl0 := #'value.
    }.
    when (key == 'parent) do {
      this impl1 := #'value.
    }.
    else {
      Slots put (this &impl, key, #'value).
    }.
  }.
}.
Dict has? := {
  localize.
  key := $1.
  {
    this get (key).
    True.
  } catch:
    err SlotError,
    { False. }.
}.

DictIterator ::= Object clone.
DictIterator keys := Nil iterator.
DictIterator dict := Nil.
DictIterator end? := { self keys end?. }.
DictIterator next := { self keys next. }.
DictIterator element := {
  key := self keys element.
  cons (key, self dict get (key)).
}.
Dict iterator := {
  iter := DictIterator clone.
  iter dict := self.
  iter keys := Kernel keys (self &impl).
  iter keys upperBound := iter keys upperBound - 2. ; My insides are screaming at this hack
  self has? 'missing ifTrue {
    iter keys pushBack 'missing.
  }.
  self has? 'parent ifTrue {
    iter keys pushBack 'parent.
  }.
  iter keys := iter keys iterator.
  iter.
}.
Dict keys := {
  self iterator keys.
}.
Dict values := {
  localize.
  this iterator keys map {
    this get.
  }.
}.
Collection inject: Dict.

;; Immutable iterator; needs map override
Dict map := {
  func0 := #'$1.
  func := { #'func0 call. }.
  coll := Dict clone.
  self visit {
    res := func ($1).
    coll get (res car) = res cdr.
  }.
  coll.
}.