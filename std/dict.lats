
Dict toString := {
  localize.
  if (this empty?) then {
    "[=>]".
  } else {
    content := this toArray map {
      $1 car toString ++ " => " ++ $1 cdr toString.
    } joinText ", ".
    "[" ++ content ++ "]".
  }.
}.

Dict empty := {
  self clone.
}.
Dict clone := {
  Kernel cloneObject (self) tap {
    self &impl := Kernel dupObject #'(self &impl).
  }.
}.
Dict get := {
  meta sys directly#: self &impl, $1.
}.
Dict get= := {
  Slots put (self &impl, $1, #'$2).
}.
Dict has? := {
  meta sys slotCheck#: self &impl, $1.
}.
Dict delete := {
  Slots delete: self &impl, $1.
}.
Dict == := {
  localize.
  other := #'$1.
  callCC {
    escapable.
    (this keys size == other keys size) ifFalse {
      return (False).
    }.
    this keys visit {
      takes '[key].
      other has? (key) ifFalse {
        return (False).
      }.
      (this get (key) == other get (key)) ifFalse {
        return (False).
      }.
    }.
    True.
  }.
}.

Dict dumpHandler := [
  '&impl => { $1 putln: "  &impl: #<...>". }
].

;; Now we have dictionaries; let's define some precedence rules
meta operators get '=~  = operator ( 5, 'none ).
meta operators get '==  = operator ( 5, 'none ).
meta operators get '=== = operator ( 5, 'none ).
meta operators get '<   = operator ( 5, 'none ).
meta operators get '<=  = operator ( 5, 'none ).
meta operators get '>   = operator ( 5, 'none ).
meta operators get '>=  = operator ( 5, 'none ).
meta operators get '/=  = operator ( 5, 'none ).
meta operators get '++  = operator (10, 'left ).
meta operators get '<>  = operator (15, 'left ).
meta operators get '<|  = operator (20, 'right).
meta operators get '|>  = operator (25, 'left ).
;; 30 is the default for new operators
meta operators get '+   = operator (35, 'left ).
meta operators get '-   = operator (35, 'left ).
meta operators get '/   = operator (40, 'left ).
meta operators get '*   = operator (45, 'left ).
meta operators get '^   = operator (50, 'right).
