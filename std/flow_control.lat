
Object := Object.
proc := hold 'proc.
Nil := Nil.

;; Continuations
Cont call := { meta sys exitCC#: self, $1. }.
Cont toString := "Cont".
global callCC := { meta sys callCC#: Cont clone, { parent dynamic $1. }. }.

;; Booleans
Object toBool := True.
False toBool := False.
Nil toBool := False.
Object true? := False.
True true? := True.
Object false? := False.
False false? := True.
Object nil? := False.
Nil nil? := True.
Boolean toString := "Boolean".
True toString := "True".
False toString := "False".
Nil toString := "Nil".
Object falsify := { hold 'self toBool := False.
                    hold 'self. }.

;; Control Statements
; TODO Make `self` for the conditionals well-defined
; TODO What if `if` had syntax like "if X then Y else Z" so each part only took one argument?
global if := { meta sys ifThenElse#: True,
                                     $1 toBool,
                                     { parent dynamic $2. },
                                     { parent dynamic $3. }. }.
Object ifTrue := { if: self, { parent dynamic $1. }, { Nil. }.
                   hold 'self. }.
Object ifFalse := { if: self, { Nil. }, { parent dynamic $1. }.
                    hold 'self. }.
Object and := { if: self, { parent dynamic $1. }, { False. }. }.
Object or := { fst := self.
               if: fst, { fst. }, { parent dynamic $1. }. }.
Object not := { if: self, { False. }, { True. }. }.

;; Loops
global loop := { restart := callCC { $1. }.
                 $1.
                 restart call: restart. }.
global while := { cond := { parent dynamic $1. }.
                  Object clone tap { self do := { stmt := { parent dynamic $1. }.
                                                  callCC { $break := { parent dynamic $1 call. }.
                                                           loop { if: cond,
                                                                      { stmt. },
                                                                      { $break: Nil. }. }. }. }. }. }.

Number times := { localize.
                  block := { parent dynamic $1. }.
                  i := 0.
                  incr := { parent i := i + 1. }.
                  while { (i) < (this). } do { block (i).
                                               incr. }. }.

;; Cond Statement
global cond := { takes '[block].
                 callCC { finished := $1.
                          whenProc := proc { if: $1,
                                                 { Object clone tap { self do := { finished call: $1. }. }. },
                                                 { Object clone tap { self do := { }. }. }. }.
                          procd := dynamic invokeSpecial: hold 'block,
                                                          { $1 when := { whenProc call. }.
                                                            $1 else := { self when (True) do ($1). }. }.
                          procd call.
                          Nil. }. }.

;; Return the script
here.
