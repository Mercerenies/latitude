
; While the basic string functionality is defined in core.lat, this file defines more sophisticated
; methods on strings.

String findBytes := { meta sys stringFindFirst#: self, $1, $2. }.
String find := {
  localize.
  takes '[substr, index].
  (index < 0) ifTrue {
    parent index := index + this length.
  }.
  byteIndex := 0.
  index times {
    parent byteIndex := meta sys stringNext#: this, byteIndex.
  }.
  byteResult := self findBytes: substr, byteIndex.
  callCC {
    escapable.
    byteResult nil? ifTrue {
      return: Nil.
    }.
    result := 0.
    count := 0.
    loop {
      ((result) >= (byteResult)) ifTrue {
        return: count.
      }.
      parent result := meta sys stringNext#: this, result.
      parent count := count + 1.
    }.
  }.
}.
String findFirst := { self find: $1, 0. }.
String findAll := {
  localize.
  takes '[substr].
  curr := -1.
  matches := Array clone.
  while { parent curr := this find: substr, curr + 1. }
    do { matches pushBack: curr. }.
  matches.
}.

String bytes? := False.
String bytes := {
  localize.
  this clone tap {
    self iterator := {
      self invoke (this slot 'iterator) call tap {
        self next := {
          self index := self index + 1.
        }.
        self element := {
          self string substringBytes: self index,
          self index + 1.
        }.
      }.
    }.
    self find := self slot 'findBytes.
    self bytes? := True.
  }.
}.

String substring := {
  takes '[i, j].
  'i assign = { $1. }.
  'j assign = { $1. }.
  size := ~l { parent self length. }.
  (i < 0) ifTrue { i = (i) + (size). }.
  (j < 0) ifTrue { j = (j) + (size). }.
  (i < 0) ifTrue { i = 0. }.
  (j < 0) ifTrue { j = 0. }.
  i1 := self byteCount.
  j1 := self byteCount.
  'i1 assign = { $1. }.
  'j1 assign = { $1. }.
  iter := self iterator.
  while { iter end? not. }
    do {
      (i == 0) ifTrue { i1 = iter index. }.
      (j == 0) ifTrue { j1 = iter index. }.
      i = i - 1.
      j = j - 1.
      iter next.
    }.
  if ((i1) and (j1))
    then { parent self substringBytes: i1, j1. }
    else { err BoundsError clone throw. }.
}.

String split := {
  localize.
  takes '[delim].
  index := 0.
  found := {
    parent index := ($1) + (delim size).
  }.
  arr := Array clone.
  (this findAll: delim) visit {
    arr pushBack: (this substring: index, $1).
    found: $1.
    delim.
  }.
  arr pushBack: (this substring: index, this size).
  arr.
}.

String replace := {
  takes '[substr, index, mthd].
  result := self.
  begin := self find: substr, index.
  begin ifTrue {
    end := (begin) + (substr size).
    str1 := result substring: 0, begin.
    str2 := result substring: begin, end.
    str3 := result substring: end, result size.
    parent result := (str1) ++ (mthd: str2) ++ (str3).
  }.
  result.
}.
String replaceFirst := { self replace: $1, 0, $2. }.
String replaceAll := {
  takes '[substr, mthd].
  curr := self.
  negativeIndex := curr size.
  'negativeIndex assign = { $1. }.
  index := { (curr size) - (negativeIndex). }.
  index= := {
    index := $1.
    index ifTrue {
      negativeIndex = (curr size) - (index).
    }.
  }.
  while { index = curr find: substr, index. }
    do {
      parent curr := curr replace: substr, index, #'mthd.
      index = (index) + (substr size).
    }.
  curr.
}.

String padLeft := {
  takes '[ch, n].
  newStr := self.
  'newStr assign = { $1. }.
  while { (newStr size) < (n). }
    do { newStr = (ch) ++ (newStr). }.
  newStr.
}.
String padRight := {
  takes '[ch, n].
  newStr := self.
  'newStr assign = { $1. }.
  while { (newStr size) < (n). }
    do { newStr = (newStr) ++ (ch). }.
  newStr.
}.

String asciiOrd := {
  (self == "") ifTrue {
    err ArgError clone tap { self message := "`asciiOrd` on empty string". } throw.
  }.
  meta sys strOrd#: self.
}.
String ord := {
  (self == "") ifTrue {
    err ArgError clone tap { self message := "`ord` on empty string". } throw.
  }.
  meta sys uniOrd#: self.
}.
Number asciiChr := {
  self isInteger? ifFalse {
    err ArgError clone tap { self message := "`asciiChr` arg non-integer". } throw.
  }.
  (self < 0) or (self > 127) ifTrue {
    err ArgError clone tap { self message := "`asciiChr` arg out of bounds". } throw.
  }.
  meta sys strChr#: self.
}.
Number chr := {
  self isInteger? ifFalse {
    err ArgError clone tap { self message := "`chr` arg non-integer". } throw.
  }.
  (self < 0) or (self > 1114111) ifTrue {
    err ArgError clone tap { self message := "`chr` arg out of bounds". } throw.
  }.
  meta sys uniChr#: self.
}.

global StringIterator ::= Iterator clone.
StringIterator index := 0.
StringIterator string := "".
StringIterator next := {
  self index := meta sys stringNext#: self string, self index.
  self index ifFalse { err UTF8IntegrityError clone throw. }.
}.
StringIterator end? := { (self index) >= (self string byteCount). }.
StringIterator element := {
  self string substringBytes:
    self index,
    (meta sys stringNext#: self string, self index).
}.
StringIterator element= := {
  err ReadOnlyError clone tap { self message := "Strings are immutable". } throw.
}.
StringIterator bytes? := { self string bytes?. }.

String iterator := {
  StringIterator clone tap {
    self index := 0.
    self string := parent self.
  }.
}.
String map := {
  takes '[mthd].
  str := "".
  self visit {
    parent str := str ++ (mthd: $1).
  }.
  self bytes? ifTrue { parent str := str bytes. }.
  str.
}.
Collection inject: String.