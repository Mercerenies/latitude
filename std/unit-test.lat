;;* MODULE unit-test
;;* PACKAGE latitude

;;;; Copyright (c) 2018 Silvio Mayolo
;;;; See LICENSE.txt for licensing details

use 'format importAllSigils.

unit-test := $whereAmI.

TestModule ::= Mixin clone.
TestModule interface := '[clone, addTest, importTestsFrom, runTests].
TestModule unitTests := [].
TestModule clone := {
  self send #'(Object clone) call tap {
    self unitTests := self unitTests dup.
  }.
}.
TestModule inject := {
  Parents above (TestModule, 'inject) call tap {
    localize.
    this unitTests := [].
    this toString := {
      super := Parents above (this, 'toString).
      if (self === this) then {
        "TestModule".
      } else {
        super call.
      }.
    }.
  }.
}.
TestModule addTest := {
  localize.
  name := $1.
  Object clone tap {
    self do := {
      UnitTest make #'($1) tap {
        self name := name.
        this unitTests pushBack: self.
      }.
    }.
  }.
}.
TestModule importTestsFrom := {
  localize.
  $1 unitTests visit {
    this unitTests pushBack: $1.
  }.
}.
TestModule runTests := {
  localize.
  total := this unitTests length.
  result := TestSummary clone.
  this unitTests visit {
    curr := $1.
    res := {
      {
        curr call.
      } default {
        FailedTest make: "Unexpected exception: " ++ $1.
      }.
    } protect {
      $1 ifTrue {
        $stderr putln: "WARNING: Unit test exited via unexpected continuation!".
      }.
    }.
    res ifFalse {
      result fails := result fails + 1.
      $stderr printf: ~fmt "~A (from ~A) failed: ~A!", curr, this, res.
    }.
  }.
  result passes := total - result fails.
  $stderr putln: "Passes: " ++ result passes.
  $stderr putln: "Fails: " ++ result fails.
  result.
}.
unit-test TestModule := TestModule.

UnitTest ::= Proc clone.
UnitTest pretty := { self name. }.
UnitTest name := '().
UnitTest call := True.
UnitTest make := {
  takes '[block].
  self clone tap {
    self call := #'(block).
  }.
}.
unit-test UnitTest := UnitTest.

TestSummary ::= Object clone.
TestSummary passes := 0.
TestSummary fails := 0.
unit-test TestSummary := TestSummary.

FailedTest ::= Object clone.
FailedTest toBool := False.
FailedTest message := "FailedTest".
FailedTest pretty := { self toString ++ " - " ++ self message. }.
FailedTest make := {
  message := $1.
  self clone tap {
    self message := message.
  }.
}.
unit-test FailedTest := FailedTest.

unit-test truthy := {
  $1 or {
    FailedTest make: "Truthy expression expected".
  }.
}.

unit-test eq := {
  a := #'$1.
  b := #'$2.
  (#'a == #'b) or {
    FailedTest make: (#'a toString) ++ " and " ++ (#'b toString) ++ " are not equal".
  }.
}.

unit-test throws := {
  exc := $1.
  result := FailedTest make: "Exception " ++ exc ++ " was not thrown".
  assignable 'result.
  Object clone tap {
    self do := {
      block := #'($1) shield.
      {
        block call.
      } catch (exc) do {
        result = True.
      }.
      result.
    }.
  }.
}.

unit-test.
