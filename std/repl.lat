;;* MODULE repl
;;* PACKAGE base

REPL ::= Object clone.

REPL quitter := {
  jump := Nil.
  setJump := { parent jump := $1. }.
  inner := Nil.
  setInner := { parent inner := $1. }.
  callCC {
    setInner: $1.
    callCC {
      setJump: $1.
      inner call: Nil.
    }.
    Kernel kill.
  }.
  setInner: Nil.
  REPL quitter := jump.
  setJump: Nil.
  REPL quitter.
} me.
REPL quit := { self quitter call: Nil. }.
REPL scope := global clone.
REPL $scope := Nil. ; To be assigned in-loop
REPL exception := Nil.
REPL lastResult := Nil.
REPL maxObjects := 10000.

global quit := { self REPL quit. }.
global $except := { self REPL exception. }.
global $it := { self REPL lastResult. }.

REPL eof? := {
  stdin eof?.
}.

REPL counter := 0.
REPL read := {
  stdout puts: "lat(" ++ self counter ++ ")% ".
  stdin readln.
}.
REPL eval := {
  Kernel eval: self scope, self $scope, $1.
}.
REPL print := {
  stdout println: #'$1.
}.
REPL loop := {
  localize.
  $whereAmI := this.
  self $scope := $dynamic clone.
  loop {
    {
      { this maxObjects is: Number. } and { (Kernel GC total) >= (this maxObjects). } ifTrue {
        Kernel GC run.
        ((Kernel GC total) >= (this maxObjects)) ifTrue {
          this maxObjects := this maxObjects * 2.
        }.
      }.
      counter := this counter + 1.
      expr := this read.
      (expr == "") and (this eof?) ifTrue {
        stdout putln "".
        this quit.
      }.
      this lastResult := this eval: expr.
      this print: this slot 'lastResult.
      this counter := counter.
    } resolve:
      True,
      {
        this exception := $1.
        stderr putln: "***** EXCEPTION *****".
        stderr putln: this exception pretty.
        {
          this exception slot? 'printStackTrace.
        } ifTrue {
          this exception printStackTrace.
        }.
      }.
  }.
}.

global REPL := REPL.
