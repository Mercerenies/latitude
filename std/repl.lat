; This is NOT imported through latitude.lat; it is imported later during the spawning
; of the REPL object itself

Kernel := Kernel.
stderr := stderr.

REPL ::= Object clone.

REPL quitter := { jump := Nil.
                  setJump := { parent jump := $1. }.
                  callCC { inner := $1.
                           callCC { setJump: $1.
                                    inner call: meta Nil. }.
                           Kernel kill. }.
                  jump. }.
REPL quit := { self quitter call: meta Nil. }.
REPL scope := global clone.
REPL $scope := meta Nil. ; To be assigned in-loop
REPL exception := meta Nil.
REPL lastResult := meta Nil.
REPL maxObjects := 10000.

global quit := { self REPL quit. }.
global $except := { self REPL exception. }.
global $it := { self REPL lastResult. }.

REPL read := { stdout puts: "> ".
               stdin readln. }.
REPL eval := { Kernel eval: self scope, self $scope, $1. }.
REPL print := { stdout println: dynamic hold '$1. }.
REPL loop := { localize.
               $whereAmI := this.
               self $scope := dynamic.
               (self scope) pairScopes (self $scope).
               loop { { { this maxObjects is: Number. } and { (Kernel GC total) >= (this maxObjects). } ifTrue
                            { Kernel GC run.
                              (Kernel GC total) >= (this maxObjects) ifTrue
                                  { this maxObjects := this maxObjects * 2. }. }.
                        expr := this read.
                        this lastResult := this eval: expr.
                        this print: this hold 'lastResult. } resolve:
                            { meta True. },
                            { this exception := $1.
                              stderr putln: "***** EXCEPTION *****".
                              stderr putln: this exception pretty.
                              { this exception has 'printStackTrace. } ifTrue
                                  { this exception printStackTrace. }. }. }. }.

global REPL := REPL.
