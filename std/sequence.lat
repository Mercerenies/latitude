;;* MODULE sequence
;;* PACKAGE latitude

sequence := $whereAmI.

SequenceIterator ::= Iterator clone.
SequenceIterator inside := Nil.
SequenceIterator next := { self inside := self inside cdr. }.
SequenceIterator end? := { self inside nil?. }.
SequenceIterator element := { self inside car. }.
SequenceIterator element= := { self inside car = $1. }.
sequence SequenceIterator := SequenceIterator.

;; Forward linked lists
Sequence := Object clone.
Sequence toString := { "#<Sequence " ++ (self list pretty) ++ ">". }.
Sequence list := Nil.
Sequence fromArray := {
  arr := $1.
  self clone tap {
    self list := arr foldr (Nil, { cons (#'$1, $2). }).
  }.
}.
Sequence iterator := {
  iter := SequenceIterator clone.
  iter inside := self list.
  iter.
}.
Sequence head := {
  if (self list nil?)
    then { Nil. }
    else { parent self list car. }.
}.
Sequence tail := {
  seq := self clone.
  if (self list nil?)
    then { seq list := Nil. }
    else { seq list := parent self list cdr. }.
  seq.
}.
sequence Sequence := Sequence.

Collection inject: Sequence.

;; A lazy sequence implementation, designed to allow infinite data structures. To
;; allow these to work, it is necessary to manually override several Collection
;; functions.
LazySequence := Sequence clone.
LazySequence toString := {
  if (self list nil?)
    then { "#<LazySequence ()>". }
    else { "#<LazySequence (" ++ (parent self list car) ++ " ...)>". }.
}.
LazySequence list := Nil.
LazySequence map! := {
  func0 := #'$1.
  func := { #'func0 call. }.
  curr := self list.
  assignable 'curr.
  impl := LazySequence make {
    curr car = func (curr car).
    curr car tap {
      curr = curr cdr.
    }.
  }.
  self list := impl list.
  self.
}.
LazySequence make := {
  func0 := #'$1.
  func := { #'func0 call. }.
  seq := self clone.
  recurse := {
    curr := Cons clone.
    curr car := ~l { func. }.
    curr car= := {
      self car.
      self car := #'$1.
    }.
    curr cdr := ~l {
      curr car.
      recurse.
    }.
    curr cdr= := {
      err ReadOnlyError clone tap {
        self message := "Read-only cell".
      } throw.
    }.
    curr.
  }.
  seq list := recurse.
  seq.
}.
LazySequence iterate := {
  func0 := #'$2.
  procd := proc { #'func0 call. }.
  next := #'$1.
  assignable 'next.
  LazySequence make {
    curr := #'next.
    next = procd call #'curr.
    curr.
  }.
}.
sequence LazySequence := LazySequence.

;; Return the script
$whereAmI.
