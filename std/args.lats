
;; The argument list. When filled, it takes the current dynamic scope and references its argument list.
global ArgList ::= Object clone.
ArgList enclosingScope := global.
ArgList clone := {
  self invoke (Object slot 'clone) call tap {
    self enclosingScope := self enclosingScope clone.
  }.
}.
ArgList fill := {
  self enclosingScope := $dynamic parent.
  self.
}.
ArgList fillWith := {
  self enclosingScope := $1.
  self.
}.
ArgList shift := {
  if (self size == 0) then {
    Nil.
  } else {
    first := parent self enclosingScope slot '$1.
    arglist := parent self.
    size := parent self size.
    temp := #'first.
    index := 2.
    'index assign = { $1. }.
    parent self map! {
      if (index > size) then {
        #'first.
      } else {
        result := arglist enclosingScope slot (("$" ++ index) intern).
        index = index + 1.
        #'result.
      }.
    }.
    #'first.
  }.
}.
ArgList unshift := {
  if (self size == 0) then {
    Nil.
  } else {
    first := parent self enclosingScope slot '$1.
    arglist := parent self.
    size := parent self size.
    temp := Nil.
    parent self map! {
      temp1 := #'temp.
      parent temp := #'$1.
      #'temp1.
    }.
    parent self enclosingScope slot '$1 = #'temp.
  }.
}.
ArgList unshiftOnto := {
  self enclosingScope slot (("$" ++ (self size + 1)) intern) = #'$1.
  self unshift.
}.

global ArgIterator ::= Iterator clone.
ArgIterator array := Nil.
ArgIterator index := 1.
ArgIterator next := {
  self index := self index + 1.
}.
ArgIterator end? := {
  self array enclosingScope slot? (("$" ++ self index) intern) not.
}.
ArgIterator element := {
  self array enclosingScope slot (("$" ++ self index) intern).
}.
ArgIterator element= := {
  self array enclosingScope slot (("$" ++ self index) intern) = #'$1.
}.

ArgList iterator := {
  ArgIterator clone tap {
    self array := parent self.
    self index := 1.
  }.
}.
ArgList dropIn := {
  target := $dynamic parent.
  index := 1.
  self visit {
    target slot (("$" ++ index) intern) = #'$1.
    parent index := index + 1.
  }.
}.

Collection inject: ArgList.

;; argv
$argv toString := "$argv".

; It's very easy to lose track of a `self` in nested method calls, and calling `parent` repeatedly
; can be annoying, so the `localize` method will bind `this` to `self` in the calling scope. `this`
; will not rebind lexically until that scope exits.
global this := { caller self. }.
global localize := {
  caller this := caller slot 'self.
}.

; Likewise, the dynamic argument behavior occasonally gets in the way,
; so this is provided to rebind dynamic arguments to lexical names. It
; expects a list of symbols (usually a literal list). The name `takes`
; implies that the method in question takes these arguments. It is
; designed to be read in English, as it is usually the first line of a
; method (possibly the second, after a `localize`).
global takes := {
  ; TODO Prohibitively slow (use random.lat as benchmark)
  args := ArgList clone fillWith ($dynamic parent).
  target := caller.
  $1 clone zip! (args) map! {
    target slot ($1 car) = $1 cdr.
    $1 car.
  }.
}.

global $* := {
  ArgList clone fillWith: self.
}.

;; Return the script
here.
