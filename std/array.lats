
;; "Cons" objects, as in Lisp
global Cons ::= Object clone.
Cons pretty := {
  chain := {
    curr := $1.
    cond {
      when (curr cdr nil?) do {
        curr car toString.
      }.
      when (curr cdr is (Cons)) do {
        curr car toString ++ " " ++ chain (curr cdr).
      }.
      else {
        curr car toString ++ " . " ++ curr cdr toString.
      }.
    }.
  }.
  "(" ++ chain (self) ++ ")".
}.
Cons carCell := Nil.
Cons cdrCell := Nil.
Cons car := { self slot 'carCell. }.
Cons cdr := { self slot 'cdrCell. }.
Cons car= := { self carCell := #'$1. }.
Cons cdr= := { self cdrCell := #'$1. }.

global cons := {
  cc := Cons clone.
  cc car = #'$1.
  cc cdr = #'$2.
  cc.
}.

Cons := Cons.

;; Array functions
Array lowerBound := 0.
Array upperBound := 0.
Array mapping := {
  var := $1.
  if { var >= 0. } then {
    (var * 2) + 1.
  } else {
    var * -2.
  }.
}.
Array empty? := { self lowerBound >= self upperBound. }.
Array pushFront := {
  value := #'$1.
  self lowerBound := self lowerBound - 1.
  self slot (self mapping (self lowerBound) ordinal) = #'value.
  #'value.
}.
Array pushBack := {
  value := #'$1.
  self slot (self mapping (self upperBound) ordinal) = #'value.
  self upperBound := self upperBound + 1.
  #'value.
}.
Array popFront := {
  if (self empty?) then {
    err BoundsError clone throw.
  } else {
    parent self lowerBound := parent self lowerBound + 1.
    parent self slot (parent self mapping (parent self lowerBound - 1) ordinal).
  }.
}.
Array popBack := {
  if (self empty?) then {
    err BoundsError clone throw.
  } else {
    parent self upperBound := parent self upperBound - 1.
    parent self slot (parent self mapping (parent self upperBound) ordinal).
  }.
}.
Array nth := {
  arr := self.
  index := $1.
  pos := if ($1 < 0) then {
    arr upperBound + index.
  } else {
    arr lowerBound + index.
  }.
  if (pos < self lowerBound) or (pos >= self upperBound) then {
    err BoundsError clone throw.
  } else {
    arr slot (parent self mapping (pos) ordinal).
  }.
}.
Array nth= := {
  arr := self.
  index := $1.
  value := #'$2.
  pos := if ($1 < 0) then {
    arr upperBound + index.
  } else {
    arr lowerBound + index.
  }.
  if (pos < self lowerBound) or (pos >= self upperBound) then {
    err BoundsError clone throw.
  } else {
    arr slot (parent self mapping (pos) ordinal) = #'value.
  }.
}.
Array size := {
  self upperBound - self lowerBound.
}.
Array join := {
  index := 1.
  size := self size.
  delim := #'$1.
  str := if (self empty?) then {
    "".
  } else {
    parent self nth (0) toString.
  }.
  while { index < size. } do {
    parent str := str ++ delim ++ parent self nth (index) toString.
    parent index := index + 1.
  }.
  str.
}.
Array joinText := {
  index := 1.
  size := self size.
  delim := #'$1.
  str := if (self empty?) then {
    "".
  } else {
    parent self nth (0) pretty.
  }.
  while { index < size. } do {
    parent str := str ++ delim ++ parent self nth (index) pretty.
    parent index := index + 1.
  }.
  str.
}.
Array concat := {
  arr := Array clone.
  self visit {
    arg := #'$1.
    if (#'arg is (Array)) then {
      #'arg visit { arr pushBack: #'$1. }.
    } else {
      arr pushBack: #'arg.
    }.
  }.
  arr.
}.
Array toString := {
  "[" ++ self join (", ") ++ "]".
}.
Array == := {
  localize.
  takes '[arr].
  {
    arr is: Array.
  } and {
    this size == arr size.
  } and {
    this zip (arr) all { $1 car == $1 cdr. }.
  }.
}.
Array < := {
  localize.
  takes '[arr].
  callCC {
    escapable.
    arr is (Array) ifFalse {
      err TypeError clone tap { self message := "Array expected". } throw.
    }.
    this zip (arr) visit {
      ($1 car < $1 cdr) ifTrue { return: True. }.
      ($1 car > $1 cdr) ifTrue { return: False. }.
    }.
    this size < arr size.
  }.
}.

;; This is a fix for a problem with `map` from `Collection`
Array clone := {
  self invoke (Object slot 'clone) call tap {
    self lowerBound := self lowerBound.
    self upperBound := self upperBound.
  }.
}.

;; Array Syntax
;; TODO Performance improvements?

global ArrayBuilder ::= Object clone.
ArrayBuilder array := Nil.
ArrayBuilder next := { self array pushBack: #'$1. }.
ArrayBuilder finish := { self array. }.

meta brackets := {
  ArrayBuilder clone tap {
    self array := Array clone.
  }.
}.

;; Statement List Syntax

global MethodBuilder ::= Object clone.
MethodBuilder array := Nil.
MethodBuilder next := {
  self array pushBack: proc #'$1.
}.
MethodBuilder finish := {
  spec := {
    args := $*.
    result := Nil.
    here statements visit {
      procd := parent self invoke: $1 slot 'call.
      args dropIn.
      parent result := procd call.
    }.
    result.
  }.
  #'spec parent := SpecialMethod.
  #'spec statements := self array.
  #'spec.
}.

global SpecialMethod ::= Method clone.
SpecialMethod statements := [].
meta statements := {
  MethodBuilder clone tap {
    self array := Array clone.
  }.
}.

;; Return the script
here.