
;; Exceptions
Exception message := "Exception!".
Exception toString := "Exception".

Exception pretty := { (self toString) ++ " - " ++ (self message). }.
Exception stack := Nil.
Exception printStackTrace := { self stack dump. }.

global SystemCallError := SystemError clone tap { self message := "Error in system call".
                                                  self toString := "SystemCallError". }.
meta SystemCallError := SystemCallError.

global SystemArgError := SystemError clone tap { self message := "Wrong number of arguments to system call".
                                                 self toString := "SystemArgError". }.
meta SystemArgError := SystemArgError.

global TypeError := SystemError clone tap { self message := "Type error".
                                            self toString := "TypeError". }.
meta TypeError := TypeError.

global SlotError := SystemError clone tap { self message := "Could not find slot".
                                            self slotName := meta Nil.
                                            self objectInstance := meta Nil.
                                            self toString := "SlotError". }.
meta SlotError := SlotError.

global ContError := SystemError clone tap { self message := "Continuation error".
                                            self toString := "ContError". }.
meta ContError := ContError.

global ParseError := SystemError clone tap { self message := "Parse error".
                                             self toString := "ParseError". }.
meta ParseError := ParseError.

global BoundsError := SystemError clone tap { self message := "Bounds error".
                                              self toString := "BoundsError". }.
meta BoundsError := BoundsError.

global IOError := SystemError clone tap { self message := "IO error".
                                          self toString := "IOError". }.
meta IOError := IOError.

global ReadOnlyError := SystemError clone tap { self message := "Write access prohibited".
                                                self toString := "ReadOnlyError". }.
meta ReadOnlyError := ReadOnlyError.

global NotSupportedError := SystemError clone tap { self message := "Not supported".
                                                    self toString := "NotSupportedError". }.
meta NotSupportedError := NotSupportedError.

global ModuleError := SystemError clone tap { self message := "Module error".
                                              self toString := "ModuleError". }.
meta ModuleError := ModuleError.

; This variable does NOT disable exceptions globally if changed. It is expected to be a Boolean
; by the system (not a method nor a truthy/falsy value). If false, this value will disable certain
; system exceptions so that they terminate the program instead. It should almost never be changed
; and is used only for temporarily disabling exceptions while modifications to `meta` itself are being
; made.
meta exceptions? := True.

;; We would return the script here, but the `has` function requires flow_control.lat
1.
