
;; Exceptions
Exception message := "Exception!".
Exception toString := "Exception".
SystemError message := "System Exception!".
SystemError toString := "SystemError".

Exception pretty := { (self toString) ++ " - " ++ (self message). }.
Exception stack := Nil.
Exception printStackTrace := { self stack dump. }.

;; Error object
global err ::= Object clone.
err Exception := Exception.
err SystemError := SystemError.

; TODO It's not possible to delete slots right now; should we change that?

err SystemCallError ::= SystemError clone tap { self message := "Error in system call". }.
err SystemArgError ::= SystemError clone tap { self message := "Wrong number of arguments to system call". }.
err TypeError ::= SystemError clone tap { self message := "Type error". }.
err SlotError ::= SystemError clone tap { self message := { "Could not find slot " ++ (self slotName). }.
                                          self slotName := Nil.
                                          self objectInstance := Nil. }.
err ContError ::= SystemError clone tap { self message := "Continuation error". }.
err ParseError ::= SystemError clone tap { self message := "Parse error". }.
err BoundsError ::= SystemError clone tap { self message := "Bounds error". }.
err IOError ::= SystemError clone tap { self message := "IO error". }.
err ReadOnlyError ::= SystemError clone tap { self message := "Write access prohibited". }.
err NotSupportedError ::= SystemError clone tap { self message := "Not supported". }.
err ModuleError ::= SystemError clone tap { self message := "Module error". }.
err LangError ::= SystemError clone tap { self message := "Error reading from external language". }.
err InputError ::= SystemError clone tap { self message := "Input error". }.
err ArgError ::= SystemError clone tap { self message := "Argument error". }.
err ProtectedError ::= err ReadOnlyError clone tap { self message := "Protected variable". }.

; It is only safe to define `missing` and `missed` once `SlotError` exists. If `missing` is sought before this
; point, it is a standard library error and the interpreter will terminate immediately
; IMPORTANT NOTE: `meta missed` is an absolute last resort that will be called by the virtual machine if
;                 `Object missing` cannot be found. Override at your own risk!
meta missed := { err := err SystemError clone.
                 err message := "Missing method left undefined".
                 err throw. }.
Object missing := { err := err SlotError clone.
                    err slotName := dynamic hold '$1.
                    err objectInstance := lexical hold 'self.
                    err throw. }.

;; We would return the script here, but the `has` function requires flow_control.lat
1.
