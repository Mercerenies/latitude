
;; Exceptions
Exception message := "Exception!".
Exception toString := "Exception".

Exception pretty := { (self toString) ++ " - " ++ (self message). }.
Exception stack := Nil.
Exception printStackTrace := { self stack dump. }.

; TODO Which of these actually need to be in `meta`?
global SystemCallError ::= SystemError clone tap { self message := "Error in system call". }.
meta SystemCallError := SystemCallError.

global SystemArgError ::= SystemError clone tap { self message := "Wrong number of arguments to system call". }.
meta SystemArgError := SystemArgError.

global TypeError ::= SystemError clone tap { self message := "Type error". }.
meta TypeError := TypeError.

global SlotError ::= SystemError clone tap { self message := "Could not find slot".
                                             self slotName := meta Nil.
                                             self objectInstance := meta Nil. }.
meta SlotError := SlotError.

global ContError ::= SystemError clone tap { self message := "Continuation error". }.
meta ContError := ContError.

global ParseError ::= SystemError clone tap { self message := "Parse error". }.
meta ParseError := ParseError.

global BoundsError ::= SystemError clone tap { self message := "Bounds error". }.
meta BoundsError := BoundsError.

global IOError ::= SystemError clone tap { self message := "IO error". }.
meta IOError := IOError.

global ReadOnlyError ::= SystemError clone tap { self message := "Write access prohibited". }.
meta ReadOnlyError := ReadOnlyError.

global NotSupportedError ::= SystemError clone tap { self message := "Not supported". }.
meta NotSupportedError := NotSupportedError.

global ModuleError ::= SystemError clone tap { self message := "Module error". }.
meta ModuleError := ModuleError.

global LangError ::= SystemError clone tap { self message := "Error reading from external language". }.
meta LangError := LangError.

global InputError ::= SystemError clone tap { self message := "Input error". }.
meta InputError := InputError.

global ArgError ::= SystemError clone tap { self message := "Argument error". }.
meta ArgError := ArgError.

; It is only safe to define `missing` and `missed` once `SlotError` exists. If `missing` is sought before this
; point, it is a standard library error and the interpreter will terminate immediately
; IMPORTANT NOTE: `meta missed` is an absolute last resort that will be called by the virtual machine if
;                 `Object missing` cannot be found. Override at your own risk!
meta missed := { err := meta SystemError clone.
                 err message := "Missing method left undefined".
                 err throw. }.
Object missing := { err := meta SlotError clone.
                    err slotName := dynamic hold '$1.
                    err objectInstance := lexical hold 'self.
                    err throw. }.

;; We would return the script here, but the `has` function requires flow_control.lat
1.
