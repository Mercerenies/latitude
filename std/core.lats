
;; Cloning and metaprogramming basics
Object clone := { Kernel cloneObject: #'self. }.
Object is? := { Parents isInstance? (#'self, #'$1). }.
Object slot := { Slots hold (#'self, #'$1). }.
Object slot= := { Slots put (#'self, #'$1, #'$2). }.
Object slot? := { Slots has? (#'self, #'$1). }.
;; Note that these delegate to `Kernel` functions. The `Kernel`
;; versions should be used directly if it is possible that the caller
;; is an NTO.
Object send := {
  Kernel invoke #'($1) on #'(self).
}.
Object dup := {
  Kernel dupObject: #'self.
}.
Object tap := {
  #'self send #'$1 call.
  #'self.
}.

;; The $whereAmI variable
global $whereAmI := Nil.

;; Stuff that needs to exist in `meta`
meta sigil := Object clone.
meta toString := "meta".

;; Basics of exception handling
Method handle := {
  meta sys handler#: #'$1.
  result := self.
  meta sys unhandler#.
  #'result.
}.
Method resolve := {
  mthd := #'self.
  cond := #'$1.
  catcher := #'$2.
  callCC {
    outer := $1.
    { mthd. } handle {
      exc := $1.
      cond (exc) ifTrue {
        outer call: (catcher: exc).
      }.
    }.
  }.
}.
Method catch := {
  target := $1.
  #'self resolve: { $1 is? (target). }, #'$2.
}.
Method catchAll := { #'self catch: Exception, #'$1. }.
Method default := { #'self catch: Exception, #'$1. }.
; Observe that `rethrow` is not overriden in `Exception`, so it will never set the `stack` field.
Object rethrow := { meta sys throw#: self. }.
Object throw := { meta sys throw#: self. }.
Exception throw := {
  self stack := currentStackTrace parent.
  self send (Object slot 'throw) call.
}.
Method protect := {
  thunk: { }, #'self, #'$1.
}.
global thunk := {
  meta sys thunk#: #'$1, #'$3.
  $1.
  result := $2.
  $3.
  meta sys unthunk#.
  #'result.
}.

;; Procs and Methods handling
Method closure := global.
Proc call := {}.
Method call := { #'self send #'self call. }.
Method toString := "Method".
Proc toString := "Proc".
Method == := { (self) == ($1). }. ; Evaluate the method and then try again
Method < := { (self) < ($1). }. ; Evaluate the method and then try again
Proc <| := {
  rhs := #'$1.
  proc {
    r := #'rhs call.
    (parent slot 'self) call: r.
  }.
}.
Proc |> := {
  #'$1 <| #'self.
}.
Proc shield := { self. }.
Method shield := { proc #'self. }.
Symbol toProc := {
  sym := self.
  proc {
    obj := ArgList clone fill shift.
    (obj send (obj slot: sym)) call.
  }.
}.

;; Cached Procedures
global Cached := Proc clone.
Cached toString := "Cached".
Cached value := Nil.
Cached done? := False.
Cached procedure := Proc.
Cached call := {
  if (self done?)
    then { parent self value. }
    else {
      parent self done? := True.
      parent self value := parent self procedure call.
    }.
}.

global proc := {
  curr := self Proc clone.
  curr call := #'$1.
  curr.
}.
global memo := {
  curr := self Cached clone.
  curr procedure := proc #'$1.
  curr.
}.
meta sigil l := {
  cache := memo #'$1.
  { cache call. }.
}.
global id := proc { #'$1. }.

;; Stream general methods
Stream in? := { meta sys streamIn#: self. }.
Stream out? := { meta sys streamOut#: self. }.
Stream puts := { meta sys streamPuts#: self, $1. }.
Stream putln := { meta sys streamPutln#: self, $1. }.
Stream print := { self puts: #'$1 toString. }.
Stream println := { self putln: #'$1 toString. }.
Stream readln := { meta sys streamRead#: self. }.
Stream read := { meta sys streamReadChar#: self. }.
Stream eof? := { meta sys streamEof#: self. }.
Stream close := { meta sys streamClose#: self. }.
Stream open := { meta sys streamFileOpen#: self clone, $1, $2. }.
Stream closeAfter := {
  stream := self.
  method := #'$1.
  {
    stream send (#'method) call.
  } protect {
    stream close.
  }.
}.
Stream exists? := { meta sys fileExists#: $1. }.
Stream flush := {
  self out? ifFalse {
    err IOError clone tap { self message := "Cannot flush non-output stream". } throw.
  }.
  meta sys streamFlush#: self.
  Nil.
}.
Stream toString := "Stream".

; Dumping and Printing Convenience Functions
Stream dump := {
  streamObj := self. ; Would use `localize` here but the core functions should be very low-dependency
  obj := #'$1.
  streamObj println: #'obj.
  Kernel keys #'obj visit {
    p := if (Slots protected? (#'obj, $1)) then "! " else "  ".
    streamObj putln: p ++ $1 asText ++ ": " ++ Slots hold (#'obj, $1) toString.
  }.
  Nil.
}.
Object printObject := { stdout println: #'self. }.
Object dumpObject := { stdout dump: #'self. }.

;; Process basics
Process toString := "Process".
Process stdin := { meta sys processInStream#: Stream clone, self. }.
Process stdout := { meta sys processOutStream#: Stream clone, self. }.
Process stderr := { meta sys processErrStream#: Stream clone, self. }.
Process spawn := { meta sys processCreate#: self, $1. }.
Process finished? := { meta sys processFinished#: self. }.
Process running? := { meta sys processRunning#: self. }.
Process exitCode := { meta sys processExitCode#: self. }.
Process execute := { meta sys processExec#: self. }.

;; Scope self-reference
global caller := global.
global lexical := { self. }.
global $dynamic := { self. }.
global scopeOf := {
  lex := $1.
  dyn := $2.
  if ($3 asText substringBytes (0, 1) == "$")
    then { dyn. }
    else { lex. }.
}.
Object me := { #'self send #'self call. }.
global do := { $1. }.
global here := {
  if (self slot? 'again)
    then { parent self slot 'again. }
    else { Nil. }.
}.
global toString := {
  if ((self) === (global))
    then "global"
    else "#<Scope>".
}.

;; Equality and Comparability
; TODO Consider moving the comparison operators to a mixin
Object === := { Kernel eq: #'self, #'$1. }.
Object == := { (self) === ($1). }.
Object > := { ($1) < (self). }.
Object >= := { ((self) > ($1)) or ((self) == ($1)). }.
Object <= := { ((self) < ($1)) or ((self) == ($1)). }.
Object /= := { ((self) == ($1)) not. }.
Object min := { if ((self) < ($1)) then (self) else ($1). }.
Object max := { if ((self) > ($1)) then (self) else ($1). }.

;; Kernel functions
Kernel toString := "Kernel".
Kernel kill := { meta sys kill#. }.
Kernel eval := { meta sys eval#: $1, $2, $3. }.
Kernel evalFile := { meta sys kernelLoad#: $1, $2. }.
Kernel readHeader := { meta sys fileHeader#: $1. }.
Kernel executablePath := { meta sys exePath#. }.
Kernel cwd := { meta sys cwdPath#. }.
Kernel evaluating? := { meta sys primIsMethod#: #'$1. }.
Kernel dupObject := { meta sys duplicate#: #'$1. }.
Kernel directKeys := {
  arr := [].
  meta sys objectKeys#: #'$1, {
    arr pushBack ($1).
  }.
  arr.
}.
Kernel keys := {
  arr := [].
  Parents hierarchy #'$1 visit {
    meta sys objectKeys#: #'$1, {
      arr pushBack ($1).
    }.
  }.
  arr.
}.
Kernel eq := { meta sys ptrEquals#: #'$1, #'$2. }.
Kernel id := { meta sys objId#: #'$1. }.
; (The load function is defined in the main latitude.lat file)

; NOTE: The kernel protection methods are provided for users who are making modifications to the
;       language itself. They are designed to be used to prevent dangerous modifications which would
;       crash the VM. The protection system is NOT designed to make fields on ordinary objects
;       private or untouchable and should not be used as such.

;; Kernel invocations
Kernel invoke := {
  mthd := #'$1.
  procd := Proc clone.
  procd target := Nil.
  procd call := {
    meta sys invoke#: #'(self target), #'(mthd).
  }.
  procd on := {
    self target := #'$1.
    self.
  }.
  procd by := {
    self handler := #'$1.
    self call := {
      meta sys doWithCallback#: #'(self target), #'(mthd), #'(self handler).
    }.
    self.
  }.
  procd.
}.

;; GC functions
Kernel GC := Object clone.
Kernel GC toString := "GC".
Kernel GC traced := False.
Kernel GC run := { meta sys runGC#. }.
Kernel GC total := { meta sys totalGC#. }.
Kernel GC limit := { meta sys limitGC#. }.
Kernel GC trace := {
  meta sys traceGC#.
  Nil.
}.
Kernel GC untrace := {
  meta sys untraceGC#.
  Nil.
}.

;; Environment variables
Kernel env := { meta sys envGet#: $1. }.
Kernel env= := {
  name := $1.
  value := $2.
  if { value nil?. } then {
    meta sys envUnset#: name.
  } else {
    meta sys envSet#: name, value.
  }.
  value.
}.

;; Kernel slot functions
global Slots := Object clone.
Slots toString := "Slots".
Slots hold := { meta sys accessSlot#: #'$1, #'$2. }.
Slots get := { Kernel invoke (self hold) on #'($1) call. }.
Slots put := { meta sys putSlot#: #'$1, #'$2, #'$3. }.
Slots delete := { meta sys remSlot#: #'$1, #'$2. Nil. }.
Slots protect := { meta sys protectVar#: #'$1, $2. }.
Slots protected? := { meta sys protectIs#: #'$1, $2. }.
Slots has? := {
  obj := #'$1.
  symbol := #'$2.
  {
    Slots hold: #'obj, #'symbol.
    True.
  } catch:
    err SlotError,
    { False. }.
}.

;; Kernel parenting functions
global Parents := Object clone.
Parents toString := "Parents".
Parents origin := {
  meta sys origin#: #'$1, #'$2.
}.
Parents above := {
  target := #'$1.
  orgn := self origin (#'target, #'$2).
  result := #'orgn parent slot #'$2.
  proc { Kernel invoke #'(result) on #'(target) call. }.
}.
Parents hierarchy := {
  arr := Array clone.
  frontier := [#'$1].
  curr := frontier popFront.
  while {
    arr containsIf { Kernel eq: #'$1, #'curr. } not.
  } do {
    arr pushBack #'curr.
    frontier pushBack #'(curr parent).
    parent curr := frontier popBack.
  }.
  arr.
}.
Parents isInstance? := {
  meta sys instanceOf#: #'$1, #'$2.
}.

;; FilePath functions
global FilePath := Object clone.
FilePath toString := "FilePath".
FilePath directory := { meta sys dirName#: $1. }.
FilePath filename := { meta sys fileName#: $1. }.
FilePath rawname := {
  temp := self filename: $1.
  match := temp findAll ".".
  if (match empty?) then {
    temp.
  } else {
    temp substring: 0, match nth -1.
  }.
}.
FilePath extension := {
  temp := self filename: $1.
  match := temp findAll ".".
  if (match empty?) then {
    "".
  } else {
    temp substring: temp findAll "." nth -1 + 1, temp size.
  }.
}.

;; Symbol functions
Symbol gensym := { meta sys gensym#: self clone. }.
Symbol gensymOf := { meta sys gensymOf#: self clone, $1. }.
Symbol asText := { meta sys symName#: self. }.
Symbol toString := { meta sys symToString#: self. }.
Symbol pretty := { self asText. }.
Symbol == := { meta sys primEquals#: self, $1. }.
Symbol < := { meta sys primLT#: self, $1. }.
String intern := { meta sys intern#: self. }.
Number ordinal := { meta sys natSym#: self. }.

;; Strings and stringification
Object stringify := { self toString. }.
String stringify := { self. }.
Object ++ := { meta sys stringConcat#: self stringify, $1 stringify. }.
Object :: := {
  #'self toString := $1 pretty.
  #'self.
}.
Object toString := "Object".
Object pretty := { #'self toString. }.
String toString := { meta sys strToString#: self. }.
String pretty := { self. }.
String == := { meta sys primEquals#: self, $1. }.
String < := { meta sys primLT#: self, $1. }.
String substringBytes := {
  result := meta sys stringSubstring#: self, $1, $2.
  if (self bytes?) then {
    result bytes.
  } else {
    result.
  }.
}.
String byteCount := { meta sys stringLength#: self. }.
Object assign= := {
  target := #'self.
  name := $1.
  rhs := #'$2.
  sym := ($1 asText ++ "=") intern.
  #'target slot (sym) = { #'target slot (name) = rhs. }.
}.
Object assignable := {
  #'self assign ($1) = { #'$1. }.
}.

;; Method cloning
Method clone := {
  procd := #'self send: (Object slot 'clone).
  procd call tap {
    #'self closure := parent slot 'self closure.
  }.
}.

; File headers
FileHeader toString := "FileHeader".
FileHeader packageName := Nil.
FileHeader moduleName := Nil.

; Locality information
StackFrame toString := "StackFrame".
StackFrame line := 0.
StackFrame file := "".
StackFrame dumpObject := {
  if { (parent self) === (StackFrame). }
    then { Nil. }
    else {
      stderr putln: (parent self file) ++ ": " ++ (parent self line toString).
      parent self parent dumpObject.
    }.
}.
global currentStackTrace := { meta sys stackTrace# parent. }.

;; We would return the script here, but the `slot?` function requires flow_control.lat
1.
