;;* MODULE random
;;* PACKAGE base

{*
 * w = 32
 * n = 624
 * m = 397
 * r = 31
 * a = 2567483615
 * u = 11
 * d = 4294967295
 * s = 7
 * b = 2636928640
 * t = 15
 * c = 4022730725
 * l = 18
 *}

random := $whereAmI.

MersenneConfig ::= Object clone.
MersenneConfig w := 512.
MersenneConfig n := 39.
MersenneConfig m := 39.
MersenneConfig r := 31.
MersenneConfig a := 2567483615.
MersenneConfig u := 11.
MersenneConfig d := 4294967295.
MersenneConfig s := 7.
MersenneConfig b := 2636928640.
MersenneConfig t := 15.
MersenneConfig c := 4022730725.
MersenneConfig l := 18.
MersenneConfig f := 1812433253.
MersenneConfig lowerMask := { 1 bitShift (- (self r)) - 1. }.
MersenneConfig upperMask := { self lowerMask bitNot. }.
MersenneConfig clone := {
  self send (Object slot 'clone) call tap {
    self w := self w.
    self n := self n.
    self m := self m.
    self r := self r.
    self a := self a.
    self u := self u.
    self d := self d.
    self s := self s.
    self b := self b.
    self t := self t.
    self c := self c.
    self l := self l.
    self f := self f.
  }.
}.
random MersenneConfig := MersenneConfig.

global $mersenne := MersenneConfig clone.

MersenneTwister ::= Object clone.
MersenneTwister config := MersenneConfig.
MersenneTwister array := [].
MersenneTwister index := 0.
MersenneTwister make := {
  takes '[seed].
  MersenneTwister clone tap {
    localize.
    this config := $mersenne clone.
    this index := this config n.
    this array := [seed].
    1 upto (this config n) do {
      takes '[i].
      prev := this array nth (i - 1).
      rhs := (this config f) * ((prev) bitShift (2 - (this config w)) bitXor (prev)) + (i).
      this array pushBack: (this config lowerMask) bitAnd (rhs).
    }.
  }.
}.
MersenneTwister extract := {
  localize.
  (this index >= this config n) ifTrue {
    this twist.
  }.
  y := this array nth (this index).
  y := (y) bitShift (- (this config u)) bitAnd (this config d) bitXor (y).
  y := (y) bitShift (   this config s ) bitAnd (this config b) bitXor (y).
  y := (y) bitShift (   this config t ) bitAnd (this config c) bitXor (y).
  y := (y) bitShift (- (this config l))                        bitXor (y).
  this index := this index + 1.
  (y) bitAnd (this config lowerMask).
}.
MersenneTwister twist := {
  localize.
  0 upto (this config n) do {
    takes '[i].
    xlhs := (this array nth (i)) bitAnd (this config upperMask).
    xrhs := (this array nth ((i + 1) mod (this config n))) bitAnd (this config lowerMask).
    x := (xlhs) + (xrhs).
    xa := x bitShift -1.
    { x mod 2 /= 0. } ifTrue {
      parent xa := (xa) bitXor (this config a).
    }.
    this array nth (i) = this array nth ((i + this config m) mod (this config n)) bitXor (xa).
  }.
  this index := 0.
}.
MersenneTwister next := { self extract. }.
random MersenneTwister := MersenneTwister.

NativeRandom ::= Object clone.
NativeRandom next := { meta sys random#. }.

;; By default, the random generator will just produce 0, for it has not been seeded. Dynamically
;; rebinding the $random variable to a random-ish object (such as a MersenneTwister instance) will
;; cause the random-producing functions to produce useful values.
global $random := NativeRandom.

nextInt := { $random next. }.
random nextInt := #'nextInt.

random.