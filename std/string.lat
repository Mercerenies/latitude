
Array := Array.

; While the basic string functionality is defined in core.lat, this file defines more sophisticated
; methods on strings.

String find := { meta sys stringFindFirst#: self, $1, $2. }.
String findFirst := { self find: $1, 0. }.
String findAll := { localize.
                    takes '[substr].
                    curr := -1.
                    matches := Array clone.
                    while { parent curr := this find: substr, curr + 1. }
                       do { matches pushBack: curr. }.
                    matches. }.

String size := { meta sys stringLength#: self. }.

String substring := { meta sys stringSubstring#: self, $1, $2. }.

String split := { localize.
                  takes '[delim].
                  index := 0.
                  found := { parent index := ($1) + (delim size). }.
                  arr := Array clone.
                  (this findAll: delim) visit { arr pushBack: (this substring: index, $1).
                                                found: $1.
                                                delim. }.
                  arr pushBack: (this substring: index, this size).
                  arr. }.

String replace := { takes '[substr, index, mthd].
                    result := self.
                    begin := self find: substr, index.
                    begin ifTrue: { end := (begin) + (substr size).
                                    str1 := result substring: 0, begin.
                                    str2 := result substring: begin, end.
                                    str3 := result substring: end, result size.
                                    parent result := (str1) ++ (mthd: str2) ++ (str3). }.
                    result. }.
String replaceFirst := { self replace: $1, 0, $2. }.
String replaceAll := { takes '[substr, mthd].
                       curr := self.
                       negativeIndex := curr size.
                       negativeIndex= := { parent negativeIndex := $1. }.
                       index := { (curr size) - (negativeIndex). }.
                       index= := { $1 ifTrue: { negativeIndex = (curr size) - (parent dynamic $1). }. }.
                       while { index = curr find: substr, index. }
                          do { parent curr := curr replace: substr, index, hold 'mthd.
                               index = (index) + (substr size). }.
                       curr. }.

String padLeft := { takes '[ch, n].
                    newStr := self.
                    newStr= := { parent newStr := $1. }.
                    while { (newStr size) < (n). }
                       do { newStr = (ch) ++ (newStr). }.
                    newStr. }.
String padRight := { takes '[ch, n].
                     newStr := self.
                     newStr= := { parent newStr := $1. }.
                     while { (newStr size) < (n). }
                        do { newStr = (newStr) ++ (ch). }.
                     newStr. }.

String ord := { self == "" ifTrue { err ArgError clone tap { self message := "`ord` on empty string". } throw. }.
                meta sys strOrd#: self. }.
Number chr := { (self < 0) or (self > 255) ifTrue
                    { err ArgError clone tap { self message := "`chr` arg out of bounds". } throw. }.
                meta sys strChr#: self. }.

String iterator := { Object clone tap
                         { self toString := "StringIterator".
                           self index := 0.
                           self string := parent self.
                           self next := { self index := self index + 1. }.
                           self end? := { (self index) >= (self string size). }.
                           self element := { self string substring: self index, self index + 1. }.
                           self element= := { err ReadOnlyError clone tap
                                                  { self message := "Strings are immutable". } throw. }. }. }.
String map := { takes '[mthd].
                str := "".
                self visit { parent str := str ++ (mthd: $1). }.
                str. }.
Collection inject: String.