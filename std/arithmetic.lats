
;; Arithmetic and Number Types
Number toString := { meta sys numToString#: self. }.
Number == := { meta sys primEquals#: self, $1. }.
Number < := { meta sys primLT#: self, $1. }.

Number + := { meta sys numAdd#: self, $1. }.
Number - := { meta sys numSub#: self, $1. }.
Number * := { meta sys numMul#: self, $1. }.
Number / := { meta sys numDiv#: self, $1. }.
Number mod := {
  curr := self.
  arg := $1.
  if ({ curr isComplex?. } or { arg isComplex?. }) then {
    err TypeError clone tap { self message := "Cannot modulo complex numbers". } throw.
  } else {
    meta sys numMod#: curr, arg.
  }.
}.
Number ^ := { meta sys numPow#: self, $1. }.

global - := { 0 - ($1). }.
global / := { 1 / ($1). }.

Number real := {
  meta sys realPart#: self.
}.
Number imag := {
  meta sys imagPart#: self.
}.
Number abs := {
  curr := self.
  if { curr isComplex?. } then {
    ((curr real ^ 2) + (curr imag ^ 2)) ^ (1 / 2).
  } else {
    if { curr < 0. } then {
      - (curr).
    } else {
      curr.
    }.
  }.
}.

Number floor := {
  if { parent self isComplex?. } then {
    err TypeError clone tap { self message := "Cannot round complex numbers". } throw.
  } else {
    meta sys numFloor#: parent self.
  }.
}.
Number round := { (self + 0.5) floor. }.
Number ceil := { - ((- (self)) floor). }.

;; Bitwise
Number bitAnd := {
  curr := self.
  arg := $1.
  if ({ curr isInteger?. } and { arg isInteger?. }) then {
    meta sys numAnd#: curr, arg.
  } else {
    err TypeError clone tap { self message := "Bitwise operation on non-integer". } throw.
  }.
}.
Number bitOr := {
  curr := self.
  arg := $1.
  if ({ curr isInteger?. } and { arg isInteger?. }) then {
    meta sys numIor#: curr, arg.
  } else {
    err TypeError clone tap { self message := "Bitwise operation on non-integer". } throw.
  }.
}.
Number bitXor := {
  curr := self.
  arg := $1.
  if ({ curr isInteger?. } and { arg isInteger?. }) then {
    meta sys numEor#: curr, arg.
  } else {
    err TypeError clone tap { self message := "Bitwise operation on non-integer". } throw.
  }.
}.
Number bitNot := { self bitXor -1. }.
Number bitShift := {
  curr := self.
  arg := $1.
  if ({ curr isInteger?. } and { arg isInteger?. }) then {
    ((curr) * (2 ^ (arg))) floor.
  } else {
    err TypeError clone tap { self message := "Bitwise operation on non-integer". } throw.
  }.
}.

;; Trigonometry
Number sin := { meta sys numTrig#: self, 0. }.
Number cos := { meta sys numTrig#: self, 1. }.
Number tan := { meta sys numTrig#: self, 2. }.
Number csc := { / ((self) sin). }.
Number sec := { / ((self) cos). }.
Number cot := { / ((self) tan). }.

Number sinh := { meta sys numTrig#: self, 3. }.
Number cosh := { meta sys numTrig#: self, 4. }.
Number tanh := { meta sys numTrig#: self, 5. }.
Number csch := { / ((self) sinh). }.
Number sech := { / ((self) cosh). }.
Number coth := { / ((self) tanh). }.

Number asin := { meta sys numTrig#: self, 7. }.
Number acos := { meta sys numTrig#: self, 8. }.
Number atan := { meta sys numTrig#: self, 9. }.
Number acsc := { (/ (self)) asin. }.
Number asec := { (/ (self)) acos. }.
Number acot := { (/ (self)) atan. }.

Number asinh := { meta sys numTrig#: self, 10. }.
Number acosh := { meta sys numTrig#: self, 11. }.
Number atanh := { meta sys numTrig#: self, 12. }.
Number acsch := { (/ (self)) asinh. }.
Number asech := { (/ (self)) acosh. }.
Number acoth := { (/ (self)) atanh. }.

Number exp := { meta sys numTrig#: self, 6. }.
Number log := { meta sys numTrig#: self, 13. }.

;; Constructing complex numbers
Number rect := { meta sys complexNumber#: Number clone, $1, $2. }.
Number polar := { (Number ii * ($2)) exp * ($1). }.

;; Important constants
Number ee := 1 exp.
Number pi := -1 acos.
Number ii := @(0, 1).
Number nan := { meta sys numNan#: Number clone. } resolve: True, Nil.
Number inf := { meta sys numInfinity#: Number clone. } resolve: True, Nil.
Number ninf := { meta sys numNegInfinity#: Number clone. } resolve: True, Nil.
Number epsilon := { meta sys numEpsilon#: Number clone. } resolve: True, Nil.

;; Numerical Type Checking
Number isBasicInt? := { (meta sys numLevel#: self) <= 0. }.
Number isInteger?  := { (meta sys numLevel#: self) <= 1. }.
Number isRational? := { (meta sys numLevel#: self) <= 2. }.
Number isFloating? := { (meta sys numLevel#: self) == 3. }.
Number isReal? := { (meta sys numLevel#: self) <= 3. }.
Number isComplex? := { (meta sys numLevel#: self) == 4. }.

;; Radixes
String radix := {
  takes '[rad].
  (rad < 2) or (rad > 36) ifTrue {
    err ArgError clone tap {
      self message := "Radix out of bounds".
    } throw.
  }.
  convert := {
    takes '[n].
    cond {
      when { (n >= ("0" ord)) and (n <= ("9" ord)). } do {
        n - ("0" ord).
      }.
      when { (n >= ("a" ord)) and (n <= ("z" ord)). } do {
        n - ("a" ord) + 10.
      }.
      when { (n >= ("A" ord)) and (n <= ("Z" ord)). } do {
        n - ("A" ord) + 10.
      }.
      else {
        err InputError clone tap {
          self message := "Text is not a number".
        } throw.
      }.
    }.
  }.
  validate := {
    (($1) >= (rad)) ifTrue {
      err InputError clone tap {
        self message := "Text is not a number".
      } throw.
    }.
  }.
  num := 0.
  self visit {
    curr := convert: $1 ord.
    validate: curr.
    parent num := (num) * (rad) + (curr).
  }.
  num.
}.

modifiedRadix := {
  takes '[str, rad, parm].
  result := str radix: rad.
  cond {
    when (parm == '-) do {
      - (result).
    }.
    when ((parm == '+) or (parm == '())) do {
      result.
    }.
    else {
      err ArgError clone tap {
        self message := "Sign does not make sense".
      } throw.
    }.
  }.
}.

meta radix x := { modifiedRadix: $1, 16, $2. }.
meta radix X := { modifiedRadix: $1, 16, $2. }.
meta radix o := { modifiedRadix: $1, 8, $2. }.
meta radix O := { modifiedRadix: $1, 8, $2. }.
meta radix b := { modifiedRadix: $1, 2, $2. }.
meta radix B := { modifiedRadix: $1, 2, $2. }.

;; Return the script
here.
